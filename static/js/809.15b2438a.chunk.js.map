{"version":3,"file":"static/js/809.15b2438a.chunk.js","mappings":"yJAGA,MA0FA,EA1FkBA,KAChB,MAAMC,EAAeC,MAAM,GAAGC,KAAK,OAC5BC,EAAOC,IAAYC,EAAAA,EAAAA,UAASL,IAC5BM,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,MAC5CG,EAAQC,IAAaJ,EAAAA,EAAAA,UAAS,MAY/BK,EAAeC,IACnB,MAAMC,EAAsB,CAC1B,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGT,IAAK,MAAMC,KAAeD,EAAqB,CAC7C,MAAOE,EAAGC,EAAGC,GAAKH,EAClB,GACEF,EAAaG,IACbH,EAAaG,KAAOH,EAAaI,IACjCJ,EAAaG,KAAOH,EAAaK,GAGjC,YADAP,EAAUE,EAAaG,GAG3B,CAEKH,EAAaM,SAAS,OACzBR,EAAU,eACZ,EASIS,EAAgBC,IACpBC,EAAAA,EAAAA,KAAA,UAEEC,UAAS,UAAAC,OAAYd,EAAS,WAAa,IAC3Ce,QAASA,IAjDQJ,KACnB,GAAIX,GAAUL,EAAMgB,GAAQ,OAE5B,MAAMK,EAAW,IAAIrB,GACrBqB,EAASL,GAASb,EAClBF,EAASoB,GACTjB,EAAmC,MAAlBD,EAAwB,IAAM,KAC/CI,EAAYc,EAAS,EA0CJC,CAAYN,GAC3BO,SAAUlB,EAAOmB,SAEhBxB,EAAMgB,IALFA,GAST,OACES,EAAAA,EAAAA,MAAA,OAAKP,UAAU,cAAaM,SAAA,EAC1BC,EAAAA,EAAAA,MAAA,OAAKP,UAAU,eAAcM,SAAA,EAC3BP,EAAAA,EAAAA,KAAA,MAAAO,SAAI,iBACJP,EAAAA,EAAAA,KAAA,KAAAO,SAAG,qDACHP,EAAAA,EAAAA,KAAA,KAAAO,SAAG,oHAIHP,EAAAA,EAAAA,KAAA,KAAAO,SAAG,kBAELC,EAAAA,EAAAA,MAAA,OAAKP,UAAU,aAAYM,SAAA,CACxB,CAAC,EAAG,EAAG,GAAGE,KAAKC,IACdV,EAAAA,EAAAA,KAAA,OAAeC,UAAU,YAAWM,SACjC,CAAC,EAAG,EAAG,GAAGE,KAAKE,GAAQb,EAAmB,EAANY,EAAUC,MADvCD,MAIZV,EAAAA,EAAAA,KAAA,OAAAO,SAAMnB,EAAM,WAAAc,OAAcd,GAAW,OACpCA,IACCY,EAAAA,EAAAA,KAAA,UAAQC,UAAU,eAAeE,QApCvBS,KAChB5B,EAASJ,GACTO,EAAiB,KACjBE,EAAU,KAAK,EAiC2CkB,SAAC,oBAKrD,C","sources":["games/TicTacToe/TicTacToe.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TicTacToe.scss\";\r\n\r\nconst TicTacToe = () => {\r\n  const initialBoard = Array(9).fill(null);\r\n  const [board, setBoard] = useState(initialBoard);\r\n  const [currentPlayer, setCurrentPlayer] = useState(\"X\");\r\n  const [winner, setWinner] = useState(null);\r\n\r\n  const handleClick = (index) => {\r\n    if (winner || board[index]) return;\r\n\r\n    const newBoard = [...board];\r\n    newBoard[index] = currentPlayer;\r\n    setBoard(newBoard);\r\n    setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\r\n    checkWinner(newBoard);\r\n  };\r\n\r\n  const checkWinner = (currentBoard) => {\r\n    const winningCombinations = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8], // Rows\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8], // Columns\r\n      [0, 4, 8],\r\n      [2, 4, 6], // Diagonals\r\n    ];\r\n\r\n    for (const combination of winningCombinations) {\r\n      const [a, b, c] = combination;\r\n      if (\r\n        currentBoard[a] &&\r\n        currentBoard[a] === currentBoard[b] &&\r\n        currentBoard[a] === currentBoard[c]\r\n      ) {\r\n        setWinner(currentBoard[a]);\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (!currentBoard.includes(null)) {\r\n      setWinner(\"It's a draw!\");\r\n    }\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setBoard(initialBoard);\r\n    setCurrentPlayer(\"X\");\r\n    setWinner(null);\r\n  };\r\n\r\n  const renderSquare = (index) => (\r\n    <button\r\n      key={index}\r\n      className={`square ${winner ? \"disabled\" : \"\"}`}\r\n      onClick={() => handleClick(index)}\r\n      disabled={winner}\r\n    >\r\n      {board[index]}\r\n    </button>\r\n  );\r\n\r\n  return (\r\n    <div className=\"tic-tac-toe\">\r\n      <div className=\"instructions\">\r\n        <h2>How to Play</h2>\r\n        <p>Click on any empty square to place your X or O.</p>\r\n        <p>\r\n          The first player to get three of their marks in a row (horizontally,\r\n          vertically, or diagonally) wins the game.\r\n        </p>\r\n        <p>Have fun!</p>\r\n      </div>\r\n      <div className=\"game-board\">\r\n        {[0, 1, 2].map((row) => (\r\n          <div key={row} className=\"board-row\">\r\n            {[0, 1, 2].map((col) => renderSquare(row * 3 + col))}\r\n          </div>\r\n        ))}\r\n        <div>{winner ? `Winner: ${winner}` : null}</div>\r\n        {winner && (\r\n          <button className=\"reset-button\" onClick={resetGame}>\r\n            Reset Game\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TicTacToe;\r\n"],"names":["TicTacToe","initialBoard","Array","fill","board","setBoard","useState","currentPlayer","setCurrentPlayer","winner","setWinner","checkWinner","currentBoard","winningCombinations","combination","a","b","c","includes","renderSquare","index","_jsx","className","concat","onClick","newBoard","handleClick","disabled","children","_jsxs","map","row","col","resetGame"],"sourceRoot":""}