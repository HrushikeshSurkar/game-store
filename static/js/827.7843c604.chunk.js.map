{"version":3,"file":"static/js/827.7843c604.chunk.js","mappings":"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","sources":["games/TakeOver/Components/StartMenu/StartMenu.js","games/TakeOver/Components/CommonComponents/BackButton/BackButton.js","games/TakeOver/Components/Maps/Maps.js","games/TakeOver/Components/GameSetup/GameSetup.js","games/TakeOver/Components/GameArena/GameArena.js","games/TakeOver/TakeOver.js"],"sourcesContent":["// StartMenu.js\r\nimport React from \"react\";\r\nimport \"./StartMenu.scss\";\r\n\r\nconst StartMenu = ({ setCurrentScreen }) => {\r\n  return (\r\n    <div className=\"start-menu-wrapper\">\r\n      <div className=\"start-menu-container\">\r\n        <div className=\"start-menu\">\r\n          <div\r\n            className=\"start-game\"\r\n            onClick={() => setCurrentScreen(\"main-arena\")} // Update screen to main-arena\r\n          >\r\n            Start Game\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StartMenu;\r\n","import { IoChevronBackSharp } from \"react-icons/io5\";\r\nimport \"./BackButton.scss\";\r\n\r\nconst BackButton = ({ goBack }) => {\r\n  return (\r\n    <div className=\"btn btn-light back-button\" onClick={goBack}>\r\n      <IoChevronBackSharp className=\"mb-1\" />\r\n      Back\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BackButton;\r\n","import React from \"react\";\r\nimport \"./Maps.scss\";\r\n\r\nconst Maps = ({ goBack, selectMap }) => {\r\n  const handleMapSelection = (mapName) => {\r\n    selectMap(mapName); // Pass the selected map back to the TakeOver component\r\n  };\r\n\r\n  return (\r\n    <div className=\"maps-container\">\r\n      <h1 className=\"maps-title\">Select Your Map</h1>\r\n      <div className=\"map-grid\">\r\n        {/* Example of map slots */}\r\n        {[\"Map 1\", \"Map 2\", \"Map 3\", \"Map 4\"].map((map) => (\r\n          <div\r\n            key={map}\r\n            className=\"map-slot\"\r\n            onClick={() => handleMapSelection(map)}\r\n          >\r\n            {map}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Maps;\r\n","// GameSetup.js\r\nimport React from \"react\";\r\n\r\nconst GameSetup = ({ selectedMap, startGame }) => {\r\n  return (\r\n    <div className=\"game-setup\">\r\n      <h1>Game Setup</h1>\r\n      <p>You have selected: {selectedMap}</p>\r\n      <button onClick={startGame}>Start Game</button>\r\n      {/* Additional settings can be added here */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameSetup;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./GameArena.scss\";\r\n\r\nconst GameArena = () => {\r\n  const [playerPopulation, setPlayerPopulation] = useState(10);\r\n  const [computerPopulation, setComputerPopulation] = useState(10);\r\n  const [bonusPoints, setBonusPoints] = useState(0);\r\n  const [level, setLevel] = useState(1);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [isWinner, setIsWinner] = useState(false);\r\n  const [intervalId, setIntervalId] = useState(null);\r\n\r\n  // Interval to increase populations\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setComputerPopulation((prev) => Math.max(prev, 0) + 2); // Increase computer population\r\n\r\n      // Check for loss condition\r\n      if (playerPopulation > 0) {\r\n        setPlayerPopulation((prev) => Math.max(prev, 0) + 1); // Increase player population\r\n      } else {\r\n        setIsGameOver(true);\r\n        clearInterval(interval);\r\n      }\r\n    }, 1000); // Every second\r\n\r\n    setIntervalId(interval);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [isGameOver]);\r\n\r\n  const handleAddPath = () => {\r\n    if (!isGameOver) {\r\n      if (playerPopulation > 0) {\r\n        setPlayerPopulation((prev) => prev - 1); // Decrease player population\r\n        setComputerPopulation((prev) => Math.max(prev - 1, 0)); // Decrease computer population\r\n        if (computerPopulation <= 1) {\r\n          setIsWinner(true);\r\n          setMessage(\"You win!\");\r\n          clearInterval(intervalId); // Stop everything on win\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleNextLevel = () => {\r\n    if (isWinner) {\r\n      setBonusPoints((prev) => prev + 5); // Increase bonus points\r\n      setComputerPopulation((prev) => prev + 5); // Increase computer population for next level\r\n      setLevel((prev) => prev + 1); // Increase level\r\n      setIsWinner(false);\r\n      setMessage(`Level ${level + 1}!`);\r\n    }\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    setPlayerPopulation(10);\r\n    setComputerPopulation(10);\r\n    setBonusPoints(0);\r\n    setLevel(1);\r\n    setMessage(\"\");\r\n    setIsGameOver(false);\r\n    setIsWinner(false);\r\n    clearInterval(intervalId); // Clear interval on restart\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-arena\">\r\n      <div className=\"tower player-1\">\r\n        <span>Player 1</span>\r\n        <span>Population: {playerPopulation}</span>\r\n      </div>\r\n      <div className=\"tower computer\">\r\n        <span>Computer</span>\r\n        <span>Population: {computerPopulation}</span>\r\n      </div>\r\n      <div className=\"buttons\">\r\n        <button\r\n          onClick={handleAddPath}\r\n          className=\"action-button\"\r\n          disabled={isGameOver}\r\n        >\r\n          Add Path\r\n        </button>\r\n        {isWinner && (\r\n          <button onClick={handleNextLevel} className=\"action-button\">\r\n            Next Level\r\n          </button>\r\n        )}\r\n      </div>\r\n      {message && <div className=\"message\">{message}</div>}\r\n      {isGameOver && (\r\n        <div className=\"popup\">\r\n          <div className=\"popup-content\">\r\n            <p>You lost! Your population reached zero.</p>\r\n            <button onClick={handleRestart} className=\"action-button\">\r\n              Restart\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameArena;\r\n","import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport StartMenu from \"./Components/StartMenu/StartMenu\";\r\nimport BackButton from \"./Components/CommonComponents/BackButton/BackButton\";\r\nimport Maps from \"./Components/Maps/Maps\";\r\nimport GameSetup from \"./Components/GameSetup/GameSetup\";\r\nimport GameArena from \"./Components/GameArena/GameArena\";\r\nimport \"./TakeOver.scss\";\r\n\r\nconst TakeOver = () => {\r\n  const [currentScreen, setCurrentScreen] = useState(\"start-menu\");\r\n  const [selectedMap, setSelectedMap] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const handleBack = () => {\r\n    switch (currentScreen) {\r\n      case \"game-arena\":\r\n        setCurrentScreen(\"game-setup\"); // Go back to game setup\r\n        break;\r\n      case \"game-setup\":\r\n        setCurrentScreen(\"main-arena\"); // Go back to map selection\r\n        break;\r\n      case \"main-arena\":\r\n        setCurrentScreen(\"start-menu\"); // Go back to start menu\r\n        break;\r\n      default:\r\n        navigate(-1); // For other cases, navigate back in history\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleMapSelection = (mapName) => {\r\n    setSelectedMap(mapName);\r\n    setCurrentScreen(\"game-setup\");\r\n  };\r\n\r\n  const startGame = () => {\r\n    setCurrentScreen(\"game-arena\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"take-over\">\r\n      <BackButton className=\"back-button\" goBack={handleBack} />\r\n      {currentScreen === \"start-menu\" && (\r\n        <StartMenu setCurrentScreen={setCurrentScreen} />\r\n      )}\r\n      {currentScreen === \"main-arena\" && (\r\n        <Maps goBack={handleBack} selectMap={handleMapSelection} />\r\n      )}\r\n      {currentScreen === \"game-setup\" && (\r\n        <GameSetup selectedMap={selectedMap} startGame={startGame} />\r\n      )}\r\n      {currentScreen === \"game-arena\" && (\r\n        <GameArena selectedMap={selectedMap} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TakeOver;\r\n"],"names":["_ref","setCurrentScreen","_jsx","className","children","onClick","goBack","_jsxs","IoChevronBackSharp","selectMap","map","selectedMap","startGame","GameArena","playerPopulation","setPlayerPopulation","useState","computerPopulation","setComputerPopulation","bonusPoints","setBonusPoints","level","setLevel","message","setMessage","isGameOver","setIsGameOver","isWinner","setIsWinner","intervalId","setIntervalId","useEffect","interval","setInterval","prev","Math","max","clearInterval","handleAddPath","disabled","handleNextLevel","concat","handleRestart","TakeOver","currentScreen","setSelectedMap","navigate","useNavigate","handleBack","BackButton","StartMenu","Maps","mapName","GameSetup"],"sourceRoot":""}